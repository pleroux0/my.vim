" ClearConanVars
" ------------------------------------------------------------------------------
Execute (Clear conan variables):
  let t:conan_profile="asdf"
  let t:conan_generator="asdf"
  let t:conan_build="asdf"
  let t:conan_user_arguments="asdf"
  ConanClearVars

Then (Vars shouldn't exist):
  Assert !exists("t:conan_profile")
  Assert !exists("t:conan_generator")
  Assert !exists("t:conan_build")
  Assert !exists("t:conan_user_arguments")

" get_arguments
" ------------------------------------------------------------------------------
Execute (conan arguments none):
  ConanClearVars

Then (arguments is empty):
  Assert myconan#get_arguments() == []

Execute (conan arguments profile):
  ConanClearVars
  let t:conan_profile = "my_profile"

Then (arguments contains profile):
  Assert myconan#get_arguments() == ["--profile", "my_profile"]

Execute (conan arguments generator):
  ConanClearVars
  let t:conan_generator = "my_generator"

Then (arguments contains generator):
  Assert myconan#get_arguments() == ["--generator", "my_generator"]

" conan project not set
" ------------------------------------------------------------------------------
Execute (conan project not set):
  ProjectClearVars
  ConanClearVars

Then:
  Assert !myconan#is_conan_project()
  Assert !myconan#install()
  Assert !myconan#build()

" conan project empty
" ------------------------------------------------------------------------------
Execute (conan project empty):
  ProjectClearVars
  let t:project_source_dir="test/case/empty"

Then (is not conan project):
  Assert !myconan#is_conan_project()
  Assert !myconan#install()
  Assert !myconan#build()

" is conan project
" ------------------------------------------------------------------------------
Execute (conan project txt):
  ProjectClearVars
  let t:project_source_dir="test/case/conanfile_txt"

Then (is conan project):
  Assert myconan#is_conan_project()

Execute (conan project py):
  ProjectClearVars
  let t:project_source_dir="test/case/conanfile_py"

Then (is conan project):
  Assert myconan#is_conan_project()

" is conan workspace
" ------------------------------------------------------------------------------
Execute (conan workspace):
  ProjectClearVars
  let t:project_source_dir="test/case/conan_workspace"

Then (is conan workspace):
  Assert myconan#is_conan_workspace()

" bad conan project
" ------------------------------------------------------------------------------
Execute (conan project bad):
  ProjectClearVars
  let t:project_source_dir = "test/case/conanfile_py"
  let t:project_build_dir = "build/conan_project_bad"

Then:
  Assert myconan#is_conan_project()
  Assert !myconan#install()
  Assert !myconan#build()

" good conan project
" ------------------------------------------------------------------------------
Execute (conan project good):
  ProjectClearVars
  ConanClearVars
  let t:project_source_dir = "test/case/conan"
  let t:project_build_dir = "build/conan_project_good"

Then:
  Assert myconan#is_conan_project()
  Assert myconan#install()
  Assert filereadable("build/conan_project_good/conanbuildinfo.cmake")
  Assert filereadable("build/conan_project_good/conanbuildinfo.txt")
  Assert myconan#build()
  Assert filereadable("build/conan_project_good/test_build")

" Make sure that the directory changes back to root
" ------------------------------------------------------------------------------
After (Clean up):
  exec cd g:main_directory

Before (Setup):
  ProjectClearVars
  ConanClearVars
  let g:main_directory = getcwd()
